#!/usr/bin/python

import os,sys,subprocess

db_name = "${database:name}"
db_host = "${database:host}"
db_user = "${database:user}"
db_password = "${database:password}"

usage = "Usage: ./sqlversioning.py (upgrade|downgrade) [optional target version to" \
 + " upgrade/downgrade to] | version\n" + \
" Use upgrade|downgrade with an optional target version to upgrade/downgrade to that database schema version\n" + \
" Use version to print out the highest database schema version available"

if (len(sys.argv) < 2):
    print("Not enough arguments. " + usage)
    sys.exit(0)
if (len(sys.argv) > 3):
	print("Too many Arguments. " + usage)
	sys.exit(0)
if (sys.argv[1].lower() == "--help"):
	print(usage)
	sys.exit(0)
if (sys.argv[1].lower() == "version"):
    os.system("${buildout:directory}/bin/python-console ${buildout:directory}/${sqlalchemy_migrate:repository_path}/manage.py version ${buildout:directory}/${sqlalchemy_migrate:repository_path}/")
    sys.exit(0)
if (sys.argv[1].lower() != "upgrade" and sys.argv[1].lower() != "downgrade"):
	print("Unknown argument: " + sys.argv[1].lower())
	sys.exit(0)
upgradeto = ""
if (len(sys.argv) == 3):
	upgradeto = " " + sys.argv[2]
else:
    if (sys.argv[1].lower() == "downgrade"):
        upgradeto = " " + "0"
subprocess.call("${buildout:directory}/bin/python-console ${buildout:directory}/${sqlalchemy_migrate:repository_path}/manage.py " + sys.argv[1].lower() + " mysql://" + db_user + ":" + db_password + "@" + db_host + "/" + db_name + " ${buildout:directory}/${sqlalchemy_migrate:repository_path}" + upgradeto + " --user-styles-path=${management:user_styles_path}" + " --sys-staticresource-path=${management:sys_staticresource_path}", shell=True)
